#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Time    : 2017/3/22 15:00
# @Author  : Runsheng     
# @File    : utils.py

"""
functions and utils used for general purpose
"""
import os
import subprocess
import signal  # only used for the exe function
import time
from functools import wraps
import multiprocessing
import fnmatch
import sys


#### third part import
from Bio import SeqIO

def which(program):
    """
    to mimic the shutils.which in python3
    :param program:
    :return:
    """
    def is_exe(fpath):
        return os.path.isfile(fpath) and os.access(fpath, os.X_OK)

    fpath, fname = os.path.split(program)
    if fpath:
        if is_exe(program):
            return program
    else:
        for path in os.environ["PATH"].split(os.pathsep):
            path = path.strip('"')
            exe_file = os.path.join(path, program)
            if is_exe(exe_file):
                return exe_file

    return None


def myexe(cmd, timeout=0):
    """
    a simple wrap of the shell
    mainly used to run the bwa mem mapping and samtool orders
    """
    def setupAlarm():
        signal.signal(signal.SIGALRM, alarmHandler)
        signal.alarm(timeout)

    def alarmHandler(signum, frame):
        sys.exit(1)

    proc=subprocess.Popen(cmd, shell=True, preexec_fn=setupAlarm,
                 stdout=subprocess.PIPE, stderr=subprocess.PIPE,cwd=os.getcwd())
    out, err=proc.communicate()
    print err
    return out, err, proc.returncode


def reverse_complement(seq):
    """
    Given: A DNA string s of length at most 1000 bp.
    Return: The reverse complement sc of s.
    due to the complement_map,
    the symbol such as \n and something else is illegal
    the input need to be pure sequence
    """
    complement_map = dict(zip("acgtACGTNn-","tgcaTGCANn-"))
    complement=[]
    for s in seq:
        try:
            complement.append(complement_map[s])
        except KeyError:
            print(s),
            pass
    reverse=''.join(reversed(complement))
    return reverse

def fasta2dic(fastafile):
    """
    Give a fasta file name, return a dict contains the name and seq
    Require Biopython SeqIO medule to parse the sequence into dict, a large genome may take a lot of RAM
    """
    if ".gz" in fastafile:
        handle=gzip.open(fastafile, "rU")
    else:
        handle=open(fastafile, "rU")
    record_dict=SeqIO.to_dict(SeqIO.parse(handle,"fasta"))
    handle.close()
    return record_dict


def dic2dic(record_dict):
    """
    :param record_dict: a SeqIO dict generated by Biopython
    :return the dict contain {name:seq}
    """
    seq_dict={}
    for k,v in record_dict.iteritems():
        seq=str(v.seq)
        seq_dict[k]=seq
    return seq_dict


def chr_select(record_dict, chro, start,end):
    """
    Note the start and end is 0 based
    give the name of refdic, and the chr, start and end to be used
    return the name and sequence (both as str)
    for example, chrcut(record_dict, "I", 100,109) returns
     ("I:100_109","AAAAAAAAAA")
    """
    name=chro+ ":"+str(start)+"_"+str(end)
    seq=str(record_dict[chro][start:end].seq)
    return name,seq


def dic2fasta(record_dict,out="record_dict.fasta"):
    """
    Write a record_dict of SeqIO sequence dict back to fasta file
    :param record_dict:
    :param out:
    :return:
    """
    with open(out,"w") as f:
        for record in sorted(record_dict.keys()):
            name=record
            seq=str(record_dict[name])
            f.write(">")
            f.write(name)
            f.write("\n")
            f.write(seq)
            f.write("\n")



class UtilsTest(object):
    def __init__(self,strings):
        self.strings=strings

    @staticmethod
    def test_which():
        assert str(which("ls"))=="/usr/bin/ls"

    @staticmethod
    def test_myexe():
        pass



if __name__=="__main__":
    UtilsTest.test_which()